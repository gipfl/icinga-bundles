#!/usr/bin/env php
<?php

error_reporting(E_ALL|E_STRICT);
$baseDir = dirname(__DIR__);
require_once "$baseDir/config.php";

$composerFile = "$baseDir/composer.json";
$composer = json_decode(file_get_contents($composerFile));
if (! $composer) {
    $error = json_last_error_msg();
    die("Failed to parse '$composerFile': $error\n");
}

$tmpDir = "$baseDir/tmp";
$provided = [];

function run($cmd)
{
    $output = null;
    $retCode = null;
    exec($cmd, $output, $retCode);
    if ($retCode !== 0) {
        die("$cmd failed with exit code $retCode: $output\n");
    }

    $result = implode("\n", $output);

    return $result;
}

function moduleUrl($module, $version)
{
    $baseUrl = 'https://github.com/Icinga/icingaweb2-module-{MODULE_NAME}/archive/{VERSION}.tar.gz';
    return str_replace(
        '{MODULE_NAME}',
        $module,
        str_replace('{VERSION}', $version, $baseUrl)
    );

}

function wantDir($dir, $name)
{
    if (is_dir($dir)) {
        echo "Using existing '$name' in '$dir'\n";
    } else {
        if (file_exists($dir)) {
            die("$dir already exists, stopping\n");
        }
        mkdir($dir);
    }
}

function download($url, $targetFile)
{
    $content = file_get_contents($url);
    if (strlen($content) < 32000) {
        die("File fetched from $url seems to be too small\n");
    }
    file_put_contents($targetFile, $content);
}

function collectDependencies($dir, $name)
{
    $provided = [];
    if (! is_file("$dir/composer.json")) {
        die("There is no '$dir/composer.json'\n");
    }
    if (! is_file("$dir/composer.lock")) {
        die("There is no '$dir/composer.lock'\n");
    }
    $json = run("composer info --format json --working-dir=$dir");
    $info = json_decode($json);
    if (! is_object($info) || ! isset($info->installed)) {
        die("Failed to check installed dependencies for '$name' in '$dir'\n");
    }
    foreach ($info->installed as $pkg) {
        // replace: dev-master a620bcf
        $provided[$pkg->name] = preg_replace('/\s.+/', '', $pkg->version);
    }

    return $provided;
}

foreach ($repos as $name => $url) {
    $targetDir = "$tmpDir/$name";
    $tarFile = "$tmpDir/${name}.tar.gz";
    wantDir($targetDir, $name);
    download($url, $tarFile);
    run("tar xfz '${tmpDir}/${name}.tar.gz' --strip-components=1 -C '${tmpDir}/${name}'");
    unlink($tarFile);
    foreach (collectDependencies($targetDir, $name) as $pkg => $version) {
        if (isset($provided[$pkg]) && $version !== $provided[$pkg]) {
            printf("Replacing '%s' %s with %s\n", $pkg, $provided[$pkg], $version);
        }
        $provided[$pkg] = $version;
    }
    // run("rm -rf $targetDir");
}

ksort($provided);
$composer->replace = $provided;
$flags = JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE;
file_put_contents($composerFile, json_encode($composer, $flags) . "\n");
